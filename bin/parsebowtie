#!/usr/bin/env ruby


require 'ruby_rum/bowtie_parser'
require 'ruby_rum/bowtie_content'

require 'optparse'





def usage
	msg =<<EOF

----------------------- Usage -------------------------
#{$0} file [options] [outfile]
-------------------------------------------------------
Parses a file produced by bowtie (only sam format)
-------------------------------------------------------
         file : name of the bowtie file
      outfile : (optional) name of the output file
-------------------------------------------------------

EOF

end

options = {}
optparse = OptionParser.new do |opts|
  # set banner of help screen
	opts.banner = usage
  # define options
  options[:both] = false
  opts.on('-b','--both','Returns the all the entries') do
    options[:both] =true
  end
  options[:unique] = false
  opts.on('-u', '--unique', 'Only returns the unique mapped alignments') do
  	options[:unique] = true
  end
  options[:non_unique] = false
  opts.on('-n', '--non-unique','Only returns the non-unique mapped alignments') do
  	options[:non_unique] = true
  end
  options[:file] = false
	# Display of the help screen
	opts.on( '-h', '--help', 'Display this screen' ) do
  	puts opts
  	exit
	end
end

optparse.parse!

unless File.exist?(ARGV[0])
	raise "Can't find file #{ARGV[0]}!"
end

file = RubyRum::BowtieParser.new(ARGV[0])


str = file.unique_to_s() if options[:unique]
str = file.non_unique_to_s() if options[:non_unique]
str = file.unique_to_s() + "\n@Non-unique: \n" + file.non_unique_to_s() if options[:both]

if ARGV[1] != nil
	z = File.new(ARGV[1],'w')
	z.write(str)
	z.close
else
	puts str
end