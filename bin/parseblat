#!/usr/bin/env ruby
require 'ruby_rum'
require 'optparse'
require 'benchmark'

usage =<<EOF

  --------------------------- Usage ----------------------------
    #{$0} -i input [options] -o outfile
  --------------------------------------------------------------
    Parses a file produced by blat (only .pslx)
  --------------------------------------------------------------
        input : name of the blat file
      outfile : name of the output file
      options : call '#{$0} -h' for more information
  --------------------------------------------------------------

EOF
unless ARGV.length > 1
  STDERR.puts usage
  exit
end

options = { :input => nil,
            :output => nil,
	    :unique => nil,
	    :non_unique => nil
          }

optparse = OptionParser.new do |opts|
  opts.banner = usage

  opts.on("-i", "--input", :REQUIRED, String, "Outfile of Blat.") do |i|
    options[:input] = i
  end

  opts.on("-o", "--output", :REQUIRED, String, "Prefix of the output.") do |o|
    options[:output] = o
  end

  opts.on("-u", "Parse out unique mappers." ) do |u|
    options[:unique] = nil
  end
  
  #opts.on("-n","--nonunique", "Parse out non-unique mappers.") do |n|
   # options[:nonunique] = nil
  #end
  
  opts.on_tail( "-h", "--help", "Display this screen" ) do
    puts opts
    exit 
  end
end

begin
  optparse.parse!
  mandatory = [:input, :output]
  missing = mandatory.select{ |param| options[param].nil? }
  puts missing
  if !missing.empty?
    puts "Missing options: #{missing.join(', ')}"
    puts usage
    exit
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
   puts $!.to_s
   puts optparse
   exit 
end

#puts Benchmark.measure{file = BlatParser::Parser.new(ARGV[0], ARGV[1])}
