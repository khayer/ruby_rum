#!/usr/bin/env ruby
require 'ruby_rum'
require 'optparse'
require 'benchmark'

usage =<<EOF

  --------------------------- Usage ----------------------------
    #{$0} -i input [options] -o outfile
  --------------------------------------------------------------
    Parses a file produced by blat (only .pslx)
  --------------------------------------------------------------
        input : name of the blat file
      outfile : name of the output file
      options : call '#{$0} -h' for more information
  --------------------------------------------------------------

EOF

end

unless ARGV.length > 1
  STDERR.puts usage
  exit
end

options = { :input => nil
            :output => nil
          }

OptionParser.new do |opts|
  opts.banner = usage

  opts.on("-i", "--input", :REQUIRED, String, "Outfile of Blat") do |i|
    options[:second] = i
  end

  opts.on("-o", "--input", :REQUIRED, String, "Outfile of Blat") do |o|
    options[:second] = i
  end

    options[:both] = false
    opts.on('-b','--both','Returns the all the entries') do
      options[:both] =true
    end
    options[:unique] = false
    opts.on('-u', '--unique', 'Only returns the unique mapped alignments') do
      options[:unique] = true
    end
    options[:non_unique] = false
    opts.on('-n', '--non-unique','Only returns the non-unique mapped alignments') do
      options[:non_unique] = true
    end
    options[:file] = false
    # Display of the help screen
    opts.on( '-h', '--help', 'Display this screen' ) do
      puts opts
      exit
    end
  end

  optparse.parse!


  puts Benchmark.measure{file = BlatParser::Parser.new(ARGV[0], ARGV[1])}


  #str = file.unique_to_s() if options[:unique]
  #str = file.non_unique_to_s() if options[:non_unique]
  #str = file.unique_to_s() + "\n@Non-unique: \n" + file.non_unique_to_s() if options[:both]

end
